// Torsten Sadowski
// SPDX-License-Identifier:  GPL-3.0-or-later

import { Button, GroupBox, SpinBox, ComboBox, CheckBox, LineEdit, VerticalBox, HorizontalBox,
    GridBox } from "std-widgets.slint";
import { UiSettings, PwmSlintSetting } from "settings.slint";
//import { PageCallback } from "page.slint";

export global SettingsPageCallback {
    pure callback model_add_setting(string);
    pure callback model_delete_setting();
    pure callback get_setting_data() -> PwmSlintSetting;
    pure callback set_setting_data(PwmSlintSetting);
    pure callback get_current_setting() -> int;
    pure callback set_current_setting(int);
    pure callback get_available_settings() -> [string];
}

export component SettingsPage inherits VerticalBox {
    //title: @tr("Settings");
    //description: @tr("This page gives an overview of the default widget set provided by Slint. The widgets are available in different styles native, fluent-(dark/light) and material-(dark/light). The widgets can be imported from \"std-widgets.slint\".");

    callback add_setting(string);
    callback delete_setting();
    callback update_settings(PwmSlintSetting);
    callback collect_settings() -> PwmSlintSetting;
    add_setting(string) => {
        SettingsPageCallback.model_add_setting(string);
        UiSettings.available-settings = SettingsPageCallback.get_available_settings();
        UiSettings.current-setting = SettingsPageCallback.get_current_setting();
        UiSettings.setting = SettingsPageCallback.get_setting_data();
    }
    delete_setting() => {
        SettingsPageCallback.model_delete_setting();
        UiSettings.available-settings = SettingsPageCallback.get_available_settings();
        UiSettings.current-setting = SettingsPageCallback.get_current_setting();
        UiSettings.setting = SettingsPageCallback.get_setting_data()
    }
    GroupBox {
        vertical-stretch: 0;
        title: @tr("Profile");

            HorizontalBox {
                alignment: start;

                Button {
                    text: @tr("Add");
                    clicked => { add_setting(@tr("Default")) }
                }

                LineEdit {
                    placeholder-text: @tr("Profile Name");
                    text: UiSettings.setting.name;
                    edited => {UiSettings.setting.name = self.text}
                }

                Button {
                    text: @tr("Delete");
                    clicked => { delete_setting() }
                }
            }
    }

    GroupBox {
        title: @tr("URL parts to use");
        vertical-stretch: 0;

        VerticalLayout {
            padding: 0px;

        HorizontalBox {
            alignment: start;
            padding: 0px;

            chbProtocol := CheckBox {
                text: @tr("Protocol");
                checked: UiSettings.setting.use-protocol;
                toggled => {UiSettings.setting.use-protocol = self.checked;}
            }
            chbSubdomain := CheckBox {
                text: @tr("Subdomain");
                checked: UiSettings.setting.use-subdomain;
                toggled => {UiSettings.setting.use-subdomain = self.checked;}
            }
            chbDomain := CheckBox {
                text: @tr("Domain");
                checked: UiSettings.setting.use-domain;
                toggled => {UiSettings.setting.use-domain = self.checked;}
            }
        }

        HorizontalBox {
            chbPortPath := CheckBox {
                text: @tr("Port, path, anchor, query parameters");
                checked: UiSettings.setting.use-params;
                toggled => {UiSettings.setting.use-params = self.checked;}
            }
        }
    }
}

HorizontalBox {
GroupBox {
    title: @tr("Use Leet");
    vertical-stretch: 0;

    HorizontalBox {
        alignment: start;
        padding: 0px;

        ComboBox {
            model: UiSettings.use-leet;
            current-value: UiSettings.setting.use-leet;
            selected(string) => { UiSettings.setting.use-leet = string }
        }
    }
}

GroupBox {
    title: @tr("Leet Level");
    vertical-stretch: 0;

    HorizontalBox {
        alignment: start;
        padding: 0px;

        ComboBox {
            model: UiSettings.leet-level;
            current-value: UiSettings.setting.leet-level;
            selected(string) => { UiSettings.setting.leet-level = string }
        }
    }
}
}

HorizontalBox {
GroupBox {
    title: @tr("Hash Algo");
    vertical-stretch: 0;

    HorizontalBox {
        alignment: start;
        padding: 0px;

        ComboBox {
            model: UiSettings.hash-algorithms;
            current-value: UiSettings.setting.hash-algorithm;
            selected(string) => { UiSettings.setting.hash-algorithm = string }
        }
    }
}

GroupBox {
        title: @tr("Password Length");
        vertical-stretch: 0;

        HorizontalBox {
            alignment: start;
            padding: 0px;

            SpinBox {
                vertical-stretch: 0;
                value: UiSettings.setting.password-length;
                edited(int) => { UiSettings.setting.password-length = int }
            }
        }
    }
}

HorizontalBox {
    GroupBox {
        title: @tr("Password Prefix");
        LineEdit {
            text: UiSettings.setting.prefix;
            edited => {UiSettings.setting.prefix = self.text}
        }
    }
    GroupBox {
        title: @tr("Password Suffix");
        LineEdit {
            text: UiSettings.setting.suffix;
            edited => {UiSettings.setting.suffix = self.text}
        }
    }
}
    GroupBox {
        title: @tr("User Name");
        vertical-stretch: 0;
        LineEdit {
            text: UiSettings.setting.username;
            edited => {UiSettings.setting.username = self.text}
        }
    }

    GroupBox {
        title: @tr("Modifier");
        vertical-stretch: 0;
        LineEdit {
            text: UiSettings.setting.modifier;
            edited => {UiSettings.setting.modifier = self.text}
        }
    }
}
